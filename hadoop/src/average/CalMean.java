//CalMean.java
package average;

import java.util.StringTokenizer;
import java.io.IOException;

//class IntWritable represents an integer
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.DoubleWritable;
//class Text represents a string
import org.apache.hadoop.io.Text;

//import org.apache.hadoop.io.*;

//class Mapper maps the input into the output
import org.apache.hadoop.mapreduce.Mapper;
//class Reducer is the Reduce
import org.apache.hadoop.mapreduce.Reducer;

//Path class keep the path of the files or directory
import org.apache.hadoop.fs.Path;
//bring a job for the task, the job is responsible for the configuration
import org.apache.hadoop.mapreduce.Job;
//split the file
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
//write the output file
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
//parser the hadoop command parameters
import org.apache.hadoop.util.GenericOptionsParser;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
// JobConf extends Configuration
// a map/reduce job configuratjion
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.JobClient;

//the configuration
import org.apache.hadoop.conf.Configuration;
//
//ToolRunner can be used to run classes implementing Tool interface
//It works in conjunction with GenericOptionsParser to parse the generic hadoop command line arguments
//and modifies the Configuration fo the Tool
//import org.apache.hadoop.util.ToolRunner;
//
import org.apache.hadoop.conf.Configured;

public class CalMean extends Configured implements Tool {
    //Mapper<K1, V1, K2, V2>
    public static class MeanMapper extends Mapper<Object, Text, Text, IntWritable> {
        //define the output key
        private Text id = new Text();
        //define the output value
        //private IntWritable one = new IntWritable(1);

        String delims = "\n";
        //map(K1 key, V1 value, OutputCollector<K2, V2> output, Reporter reporter);
        //Each invocation of the map() method is given a key/value pair of types K1 and V1, respectively;
        //The key/value pairs generated by the mapper are outputted via the collect() method of the OutputCollector object
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            String line = value.toString();
            StringTokenizer st = new StringTokenizer(line, delims);

            while(st.hasMoreTokens()){
            	String tokens[] = st.nextToken().split(",");
                id.set(tokens[0]);
                context.write(id, new IntWritable( Integer.parseInt(tokens[1]) ));
            }

        }
    }

    public static class MeanReducer extends Reducer<Text, IntWritable, Text, DoubleWritable> {
        //int count = 0;
        DoubleWritable result = new DoubleWritable();
        //each invocation of the reduce() method at the reducer is given a key of type K2 and a list of values of type V2
        //The reduce() method is also given an OutputCollector to gather its key/value output, which is of type K3/V3
        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException,InterruptedException {
            double sum = 0.0;
            int count = 0;
            
            for(IntWritable val : values){
                sum += val.get();
                count += 1;
            }

            sum = sum / count ;
            result.set(sum);
            // in the reduce() method we can call output.collect((K3) k, (V3) v)
            context.write(key, result);
        }
        
    }

    public int run(String[] args) throws Exception {
        // create a new JobConf
        JobConf conf = new JobConf(getConf(), CalMean.class);	
        
        String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
        if(otherArgs.length != 2){
        	System.err.println("Usage: CalMean <in> <out>");
        	System.exit(2);
        }
        
        //each running task is a Job, and the name is "CalMean"
        Job job = new Job(conf, "CalMean");
        //job.setJobName("CalMean");

        //set the number of reduce tasks
        job.setNumReduceTasks(3);
        
        //setup Mapper and Reducer
        job.setMapperClass(MeanMapper.class);
        job.setCombinerClass(MeanReducer.class);
        job.setReducerClass(MeanReducer.class);
        
        //setup the type of key and value
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        //job.setInputFormat(TextInputFormat.class);
        //job.setOutputFormat(TextOutputFormat.class);
        
        FileInputFormat.setInputPaths(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        
        JobClient.runJob(conf);
        return 0;
        //System.exit(job.waitForCompletion(true) ? 0 : 1);        
    }
    
	public static void main(String[] args) throws Exception {
		int res = ToolRunner.run(new Configuration(), new CalMean(), args);
		System.exit(res);
	}
    
}
